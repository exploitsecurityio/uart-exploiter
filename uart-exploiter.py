#!/usr/bin/python3
# Author: Exploit Security Team
# Name: uart-exploiter
# Web: exploitsecurity.io
# Git Repo: https://github.com/exploitsecurityio/
# Function: Python UART toolkit for Security Researchers. To be used with standard FTDI cable. Interfaces with a connected UART peripheral and can be used for
# - Interactive UART passthrough over FTDI

from pyftdi.ftdi import Ftdi
import pyftdi.serialext
from pyftdi import FtdiLogger
from pyftdi.ftdi import Ftdi
from pyftdi.misc import to_bool
import pyftdi.serialext
from pyftdi.serialext import serial_for_url
import sys
import os
import signal
import threading
from time import sleep
from threading import Thread
from threading import Semaphore
from random import random
import time

global uart_interface
global baud_rate
global clr_cmd
global baudRates

def handler(signum, frame):
    pass

def console_write(semaphore, uart):
    with semaphore:
        for buffer in sys.stdin:
            try:
                uart.write(buffer)
            except IOError as e:
                print (e)
            except KeyboardInterrupt as kb:
                print (kb)

def uart_connect():
    baud_rate = get_baud()
    port = pyftdi.serialext.serial_for_url(uart, baudrate=baud_rate, bytesize=8, parity='N', stopbits=1)
    connect_status = port.is_open
    sleep(1)
    semaphore = Semaphore(1)
    worker = Thread(target=console_write, args=(semaphore, port))
    worker.start()
    print("[Connected to UART]")
    while connect_status:
        data = port.readline()
        print (str(data.decode("ISO-8859-1")), flush=True, end='')

def baud_scan(uart):
    try:
        baudRates = [300, 600, 1200, 2400, 4800, 9600, 14400, 28800, 36400, 57600, 115200]
        validRates = []
        print("[Estimating Baud Rate]")
        print ("[Power Cycle Device]")
        input("[Enter to begin]")
        for baud in baudRates:
            try:
                port = pyftdi.serialext.serial_for_url(uart, baudrate=baud, bytesize=8, parity='N', stopbits=1, timeout=1)
                connect_status = port.is_open
                sleep (2)
                data = port.read(8)
                print (f"\n[Checking baud {baud}]\n" + ("[Data]: " + str(data.decode("ISO-8859-1"))), flush=True, end='')
            except IOError as e:
                print (e)
            except KeyboardInterrupt as kb:
                print (kb)
        print ("\n")
        input("[Enter to continue]")
    except EOFError:
        exit()
        return
    except KeyboardInterrupt as e:
        print (e)
        return

def get_baud():
    try:
        while True:
            baud = (input("[Baud Rate]: "))
            if baud.isdigit():
                if len(baud) < 10:
                    return int(baud.strip())
                else:
                    print ("[Invalid Option]")
                    sleep(1)
                    return
            else:
                try:
                    return
                except EOFError:
                    exit()
                    return
    except EOFError:
        exit()
        return
    except KeyboardInterrupt as e:
        print (e)
        return

def initialise_uart():
    try:
        device = str(Ftdi.list_devices())
        device_details = device.split(",")
        vid = (device_details[0].strip()[22:])
        pid = (device_details[1].strip())
        bus = (device_details[2].strip())
        address = (device_details[3].strip())
        sn = (device_details[4].strip()[4:-1])
        description = (device_details[6].strip()[:-1])
        interface = (device_details[7].strip()[:-2])
        uart_interface = ("ftdi://ftdi:232:"+sn+"/"+interface)
        return uart_interface
    except IOError:
        print ("[No FTDI devices found]")
    except:
        print("[No FTDI device found]")
        sys.exit(0)


def banner():
    if os.name == 'posix':
        clr_cmd = ('clear')
    elif os.name == 'nt':
        clr_cmd = ('cls')
    os.system(clr_cmd)
    print("╦ ╦╔═╗╦═╗╔╦╗  ╔═╗─┐ ┬┌─┐┬  ┌─┐┬┌┬┐┌─┐┬─┐")
    print("║ ║╠═╣╠╦╝ ║   ║╣ ┌┴┬┘├─┘│  │ ││ │ ├┤ ├┬┘")
    print("╚═╝╩ ╩╩╚═ ╩   ╚═╝┴ └─┴  ┴─┘└─┘┴ ┴ └─┘┴└─")
    print("[by exploitsecurity.io]\n")

def menu(uart):
    try:
        while True:
            banner()
            print("      ╔╦╗┌─┐┌┐┌┬ ┬")
            print("+─────║║║├┤ ││││ │────+")
            print("|     ╩ ╩└─┘┘└┘└─┘    |")
            print("|    1. UART Connect  |")
            print("|    2. UART Scan     |")
            print("|    3. Quit          |")
            print("+─────────────────────+")
            option = int(input("[Option]: "))
            if option == 1:
                uart_connect()
            elif option == 2:
                baud_scan(uart)
            elif option == 3:
                    print ("[Curiosity Drives Our Very Fabric]")
                    sys.exit(0)
            else:
                    print ("[Invalid Option]")
                    sleep(1)
    except KeyboardInterrupt as e:
        print (e)
        print ("[Curiosity Drives Our Very Fabric]")
        return
    except ValueError as ve:
        print (ve)
        return
    except EOFError:
        exit()
        return

def main():
    signal.signal(signal.SIGTSTP, handler)
    uart_device = initialise_uart()
    menu(uart_device)

if __name__ == '__main__':
    main()
