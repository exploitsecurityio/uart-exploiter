#!/usr/bin/python3
# Author: Exploit Security Team
# Name: uart-exploiter
# Web: exploitsecurity.io
# Git Repo: https://github.com/exploitsecurityio/
# Function: Python UART toolkit for Security Researchers. To be used with standard FTDI cable. Interfaces with a connected UART peripheral and can be used for
# - Interactive UART passthrough over FTDI

import codecs
from pyftdi.ftdi import Ftdi
import pyftdi.serialext
from pyftdi import FtdiLogger
from pyftdi.ftdi import Ftdi
from pyftdi.misc import to_bool
import pyftdi.serialext
from pyftdi.serialext import serial_for_url
import sys
import os
import signal
import threading
from time import sleep
import re
import subprocess

global uart_interface
global baud_rate
global clr_cmd

def handler(signum, frame):
    pass

def console_read(uart):
    while True:
        data = uart.read(1)
        print (codecs.decode(data, 'utf-8'))

def get_baud():
    try:
        while True:
            baud = (input("[Baud Rate]: "))
            if baud.isdigit():
                if len(baud) < 10:
                    return int(baud.strip())
                else:
                    print ("[Invalid Option]")
                    sleep(1)
                    return
            else:
                try:
                    return
                except EOFError:
                    exit()
                    return
    except EOFError:
        exit()
        return
    except KeyboardInterrupt as e:
        print (e)
        return

def initialise_uart():
    try:
        device = str(Ftdi.list_devices())
        device_details = device.split(",")
        vid = (device_details[0].strip()[22:])
        pid = (device_details[1].strip())
        bus = (device_details[2].strip())
        address = (device_details[3].strip())
        sn = (device_details[4].strip()[4:-1])
        description = (device_details[6].strip()[:-1])
        interface = (device_details[7].strip()[:-2])
        uart_interface = ("ftdi://ftdi:232:"+sn+"/"+interface)
        return uart_interface
    # devices = pyftdi.serialext.serial_for_url
    # if not devices:
    #     raise IOError("[No FTDI devices found]")
    # device = devices[0]
    # return device
    except IOError:
        print ("[No FTDI devices found]")
    except:
        print("[No FTDI device found]")
        sys.exit(0)


def banner():
    if os.name == 'posix':
        clr_cmd = ('clear')
    elif os.name == 'nt':
        clr_cmd = ('cls')
    os.system(clr_cmd)
    print("╦ ╦╔═╗╦═╗╔╦╗  ╔═╗─┐ ┬┌─┐┬  ┌─┐┬┌┬┐┌─┐┬─┐")
    print("║ ║╠═╣╠╦╝ ║   ║╣ ┌┴┬┘├─┘│  │ ││ │ ├┤ ├┬┘")
    print("╚═╝╩ ╩╩╚═ ╩   ╚═╝┴ └─┴  ┴─┘└─┘┴ ┴ └─┘┴└─")
    print("[by exploitsecurity.io]\n")

def menu(uart):
    try:
        while True:
            banner()
            print("      ╔╦╗┌─┐┌┐┌┬ ┬")
            print("+─────║║║├┤ ││││ │────+")
            print("|     ╩ ╩└─┘┘└┘└─┘    |")
            print("|    1. UART Connect  |")
            print("|    2. Quit          |")
            print("+─────────────────────+")
            option = int(input("[Option]: "))
            if option == 1:
                    baud_rate = get_baud()    
                    # try:
                    port = pyftdi.serialext.serial_for_url(uart, baudrate=baud_rate, bytesize=8, parity='N', stopbits=1)
                    connect_status = port.is_open
                        # if connect_status == True:
                    sleep(1)
                    print("[Connected to UART]")
                    while connect_status:
                        data = port.readline()
                        print (codecs.decode(data, 'unicode_escape'))
                        # print (str(data.decode('unicode_escape')))
                    # except:
                    #     port.close()
            elif option == 2:
                    print ("[Curiosity Drives Our Very Fabric]")
                    sys.exit(0)
            else:
                    print ("[Invalid Option]")
                    sleep(1)
    except KeyboardInterrupt as e:
        print (e)
        print ("[Curiosity Drives Our Very Fabric]")
        return
    except ValueError as ve:
        print (ve)
        return
    except EOFError:
        exit()
        return

def main():
    signal.signal(signal.SIGTSTP, handler)
    uart_device = initialise_uart()
    menu(uart_device)

if __name__ == '__main__':
    main()
